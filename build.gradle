buildscript{
    /*
     * ext : build.gradle에서 사용하는 전역변수를 설정하겠다.
     * springBootVersion이라는 전역변수를 선언하고 값을 2.1.7.RELEASE로 줌
     * => spring-boot-gradle-plugin라는 그레이들 플러그인의 2.1.7을 의존성으로 받겠다
     */
    ext{
        springBootVersion = '2.1.7.RELEASE'
    }

    /*
     * 각종 의존성(라이브러리)등을 어떤 원격 저장소에서 받을지 정함.
     * 주로 mavenCentral을 사용했는데 라이브러리 업로드 난이도가 쉬워진(?) jcenter를 요즘 사용하는 추세임
     */
    repositories{
        mavenCentral()
        jcenter()
    }

    /*
     * dependencies : 프로젝트 개발에 필요한 의존성을 선언하는 곳
     * 특정버전을 명시하지 않아야만 작성한 spring-boot-gradle-plugin:${}버전을 따라감
     * 이렇게 관리하면 라이브러리 버전 관리가 한번에 되고 버전 충돌문제가 해결됨 !!
     */
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}


/*
 * 밑에 4개는 자바와 스프링부트 사용하기 위한 필수 플러그인  -> 앞으로 계속 추가해놓으면됨
 */
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management' // 스프링 부트 의존성 관리해주는 플러그인이라 꼭 추가해야함

group 'com.project.freelec'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
repositories {
    mavenCentral()
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12' // 이건 기본으로 돼있었음
    /*
     * 추가
     */
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.projectlombok:lombok')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa') // 스프링부트용 Sprin됨g data jpa 추상화 라이브러리. 부트 버전에 맞춰 버전 관리해줌
    implementation('com.h2database:h2') // 인메모리 관계형 데이터베이스. 메모리에서 실행되므로 어플리케이션 재시작마다 초기화
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    implementation('org.springframework.boot:spring-boot-starter-mustache') // 4장. 머스테치 스타터 의존성 추가

    implementation 'pl.allegro.tech.boot:handlebars-spring-boot-starter:0.3.2' // template engine

}
